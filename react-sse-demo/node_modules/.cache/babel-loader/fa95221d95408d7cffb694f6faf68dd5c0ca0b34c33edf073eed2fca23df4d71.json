{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { ServerEventsContext } from \"./ServerEventsProvider\";\nexport const useServerEvents = () => {\n  _s();\n  //const [subscriberID, setSubscriberID] = useState<number>(0);\n  const [eventData, setEventData] = useState();\n\n  //const formatEvent = `@sse-lib/${eventType}`\n\n  const eventSource = useContext(ServerEventsContext);\n  //console.log('eventSource -> useContext: ', eventSource)\n\n  if (!eventSource) {\n    throw new Error(`To use \"useServerEvents()\" wrap your application in provider:\n        <ServerEventsProvider>\n          <YourApp />\n        </ServerEventsProvider>\n    `);\n  }\n\n  //const unsubscribe = () => eventSource.close();\n\n  useEffect(() => {\n    eventSource.onmessage = event => {\n      console.log(\"eventSource.onmessage: \", event);\n      const data = JSON.parse(event.data);\n      setEventData(data);\n    };\n    return () => {\n      //unsubscribe();\n    };\n  }, []);\n  return {\n    data: eventData,\n    unsubscribe\n  };\n};\n_s(useServerEvents, \"crW7YfC0cy2+AF/lG/MG7LCRH3U=\");","map":{"version":3,"names":["useContext","useEffect","useState","ServerEventsContext","useServerEvents","_s","eventData","setEventData","eventSource","Error","onmessage","event","console","log","data","JSON","parse","unsubscribe"],"sources":["/Users/kostyalbalint/Documents/fun/react-sse/react-sse-demo/src/serverEvents/useServerEvents.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { ServerEventsContext } from \"./ServerEventsProvider\";\n\nexport interface ProcessingResult<T> {\n  data: T | undefined;\n  unsubscribe: () => void;\n}\n\nexport const useServerEvents = <T extends object>(): ProcessingResult<T> => {\n  //const [subscriberID, setSubscriberID] = useState<number>(0);\n  const [eventData, setEventData] = useState<T>();\n\n  //const formatEvent = `@sse-lib/${eventType}`\n\n  const eventSource = useContext(ServerEventsContext);\n  //console.log('eventSource -> useContext: ', eventSource)\n\n  if (!eventSource) {\n    throw new Error(`To use \"useServerEvents()\" wrap your application in provider:\n        <ServerEventsProvider>\n          <YourApp />\n        </ServerEventsProvider>\n    `);\n  }\n\n  //const unsubscribe = () => eventSource.close();\n\n  useEffect(() => {\n    eventSource.onmessage = (event) => {\n      console.log(\"eventSource.onmessage: \", event);\n      const data = JSON.parse(event.data);\n      setEventData(data);\n    };\n\n    return () => {\n      //unsubscribe();\n    };\n  }, []);\n\n  return {\n    data: eventData,\n    unsubscribe,\n  };\n};\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,mBAAmB,QAAQ,wBAAwB;AAO5D,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAA6C;EAAAC,EAAA;EAC1E;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAI,CAAC;;EAE/C;;EAEA,MAAMM,WAAW,GAAGR,UAAU,CAACG,mBAAmB,CAAC;EACnD;;EAEA,IAAI,CAACK,WAAW,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE;AACrB;AACA;AACA;AACA,KAAK,CAAC;EACJ;;EAEA;;EAEAR,SAAS,CAAC,MAAM;IACdO,WAAW,CAACE,SAAS,GAAIC,KAAK,IAAK;MACjCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAAC;MAC7C,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,CAACG,IAAI,CAAC;MACnCP,YAAY,CAACO,IAAI,CAAC;IACpB,CAAC;IAED,OAAO,MAAM;MACX;IAAA,CACD;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLA,IAAI,EAAER,SAAS;IACfW;EACF,CAAC;AACH,CAAC;AAACZ,EAAA,CAnCWD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}